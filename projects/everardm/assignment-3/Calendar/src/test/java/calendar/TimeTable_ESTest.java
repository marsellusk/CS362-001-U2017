/*
 * This file was automatically generated by EvoSuite
 * Tue Aug 08 01:19:12 GMT 2017
 */

package calendar;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import calendar.Appt;
import calendar.CalDay;
import calendar.TimeTable;
import java.util.LinkedList;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TimeTable_ESTest extends TimeTable_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TimeTable timeTable0 = new TimeTable();
      assertNotNull(timeTable0);
      
      LinkedList<Appt> linkedList0 = new LinkedList<Appt>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      boolean boolean0 = linkedList0.add((Appt) null);
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      
      Appt appt0 = new Appt((-2997), 1, 7, 3, 982, "69GS8U[BSzvph%H10<Gg", "69GS8U[BSzvph%H10<Gg");
      assertEquals(2, Appt.RECUR_BY_MONTHLY);
      assertEquals(1, Appt.RECUR_BY_WEEKLY);
      assertEquals(0, Appt.RECUR_NUMBER_NEVER);
      assertEquals(3, Appt.RECUR_BY_YEARLY);
      assertEquals(1000, Appt.RECUR_NUMBER_FOREVER);
      assertNotNull(appt0);
      assertEquals(1, appt0.getStartMinute());
      assertFalse(appt0.isRecurring());
      assertFalse(appt0.getValid());
      assertEquals(7, appt0.getStartDay());
      assertEquals(0, appt0.getRecurNumber());
      assertEquals("69GS8U[BSzvph%H10<Gg", appt0.getTitle());
      assertEquals(3, appt0.getStartMonth());
      assertEquals(2, appt0.getRecurBy());
      assertEquals("69GS8U[BSzvph%H10<Gg", appt0.getDescription());
      assertEquals(0, appt0.getRecurIncrement());
      assertEquals((-2997), appt0.getStartHour());
      assertEquals(982, appt0.getStartYear());
      
      boolean boolean1 = linkedList0.add(appt0);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(2, Appt.RECUR_BY_MONTHLY);
      assertEquals(1, Appt.RECUR_BY_WEEKLY);
      assertEquals(0, Appt.RECUR_NUMBER_NEVER);
      assertEquals(3, Appt.RECUR_BY_YEARLY);
      assertEquals(1000, Appt.RECUR_NUMBER_FOREVER);
      assertEquals(2, linkedList0.size());
      assertEquals(1, appt0.getStartMinute());
      assertFalse(appt0.isRecurring());
      assertFalse(appt0.getValid());
      assertEquals(7, appt0.getStartDay());
      assertEquals(0, appt0.getRecurNumber());
      assertEquals("69GS8U[BSzvph%H10<Gg", appt0.getTitle());
      assertEquals(3, appt0.getStartMonth());
      assertEquals(2, appt0.getRecurBy());
      assertEquals("69GS8U[BSzvph%H10<Gg", appt0.getDescription());
      assertEquals(0, appt0.getRecurIncrement());
      assertEquals((-2997), appt0.getStartHour());
      assertEquals(982, appt0.getStartYear());
      
      int[] intArray0 = new int[11];
      intArray0[0] = 1;
      LinkedList<Appt> linkedList1 = timeTable0.permute(linkedList0, intArray0);
      assertTrue(linkedList1.equals((Object)linkedList0));
      assertNotSame(linkedList0, linkedList1);
      assertNotSame(linkedList1, linkedList0);
      assertNotNull(linkedList1);
      assertEquals(2, linkedList0.size());
      assertEquals(2, linkedList1.size());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TimeTable timeTable0 = new TimeTable();
      assertNotNull(timeTable0);
      
      LinkedList<Appt> linkedList0 = new LinkedList<Appt>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      boolean boolean0 = linkedList0.add((Appt) null);
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      
      Appt appt0 = new Appt((-2997), 1, 7, 3, 982, "69GS8U[BSzvph%H10<Gg", "69GS8U[BSzvph%H10<Gg");
      assertEquals(2, Appt.RECUR_BY_MONTHLY);
      assertEquals(1, Appt.RECUR_BY_WEEKLY);
      assertEquals(0, Appt.RECUR_NUMBER_NEVER);
      assertEquals(1000, Appt.RECUR_NUMBER_FOREVER);
      assertEquals(3, Appt.RECUR_BY_YEARLY);
      assertNotNull(appt0);
      assertFalse(appt0.getValid());
      assertEquals(2, appt0.getRecurBy());
      assertEquals(0, appt0.getRecurNumber());
      assertEquals("69GS8U[BSzvph%H10<Gg", appt0.getTitle());
      assertEquals(982, appt0.getStartYear());
      assertEquals("69GS8U[BSzvph%H10<Gg", appt0.getDescription());
      assertEquals(0, appt0.getRecurIncrement());
      assertEquals(3, appt0.getStartMonth());
      assertEquals(1, appt0.getStartMinute());
      assertFalse(appt0.isRecurring());
      assertEquals((-2997), appt0.getStartHour());
      assertEquals(7, appt0.getStartDay());
      
      boolean boolean1 = linkedList0.add(appt0);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(2, Appt.RECUR_BY_MONTHLY);
      assertEquals(1, Appt.RECUR_BY_WEEKLY);
      assertEquals(0, Appt.RECUR_NUMBER_NEVER);
      assertEquals(1000, Appt.RECUR_NUMBER_FOREVER);
      assertEquals(3, Appt.RECUR_BY_YEARLY);
      assertEquals(2, linkedList0.size());
      assertFalse(appt0.getValid());
      assertEquals(2, appt0.getRecurBy());
      assertEquals(0, appt0.getRecurNumber());
      assertEquals("69GS8U[BSzvph%H10<Gg", appt0.getTitle());
      assertEquals(982, appt0.getStartYear());
      assertEquals("69GS8U[BSzvph%H10<Gg", appt0.getDescription());
      assertEquals(0, appt0.getRecurIncrement());
      assertEquals(3, appt0.getStartMonth());
      assertEquals(1, appt0.getStartMinute());
      assertFalse(appt0.isRecurring());
      assertEquals((-2997), appt0.getStartHour());
      assertEquals(7, appt0.getStartDay());
      
      int[] intArray0 = new int[11];
      LinkedList<Appt> linkedList1 = timeTable0.permute(linkedList0, intArray0);
      assertTrue(linkedList1.equals((Object)linkedList0));
      assertNotSame(linkedList0, linkedList1);
      assertNotSame(linkedList1, linkedList0);
      assertNotNull(linkedList1);
      assertEquals(2, linkedList0.size());
      assertEquals(2, linkedList1.size());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TimeTable timeTable0 = new TimeTable();
      assertNotNull(timeTable0);
      
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        timeTable0.permute((LinkedList<Appt>) null, intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TimeTable timeTable0 = new TimeTable();
      assertNotNull(timeTable0);
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      assertNotNull(mockGregorianCalendar0);
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      
      CalDay calDay0 = new CalDay(mockGregorianCalendar0);
      assertNotNull(calDay0);
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(1, calDay0.getMonth());
      assertEquals(2014, calDay0.getYear());
      assertEquals(1, calDay0.getDay());
      assertTrue(calDay0.isValid());
      assertEquals((-1), calDay0.getSizeAppts());
      
      LinkedList<Appt> linkedList0 = calDay0.appts;
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Appt appt0 = new Appt(7, 7, 7, 7, 60, "Nmg4cO:lf`lExp3owa", "Nmg4cO:lf`lExp3owa");
      assertEquals(2, Appt.RECUR_BY_MONTHLY);
      assertEquals(3, Appt.RECUR_BY_YEARLY);
      assertEquals(1000, Appt.RECUR_NUMBER_FOREVER);
      assertEquals(0, Appt.RECUR_NUMBER_NEVER);
      assertEquals(1, Appt.RECUR_BY_WEEKLY);
      assertNotNull(appt0);
      assertEquals(0, appt0.getRecurNumber());
      assertEquals(7, appt0.getStartDay());
      assertEquals(2, appt0.getRecurBy());
      assertEquals("Nmg4cO:lf`lExp3owa", appt0.getDescription());
      assertTrue(appt0.getValid());
      assertFalse(appt0.isRecurring());
      assertEquals(60, appt0.getStartYear());
      assertEquals("Nmg4cO:lf`lExp3owa", appt0.getTitle());
      assertEquals(7, appt0.getStartHour());
      assertEquals(7, appt0.getStartMinute());
      assertEquals(7, appt0.getStartMonth());
      assertEquals(0, appt0.getRecurIncrement());
      
      int[] intArray0 = new int[7];
      intArray0[0] = 1;
      boolean boolean0 = linkedList0.add(appt0);
      assertTrue(boolean0);
      assertEquals(2, Appt.RECUR_BY_MONTHLY);
      assertEquals(3, Appt.RECUR_BY_YEARLY);
      assertEquals(1000, Appt.RECUR_NUMBER_FOREVER);
      assertEquals(0, Appt.RECUR_NUMBER_NEVER);
      assertEquals(1, Appt.RECUR_BY_WEEKLY);
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(1, calDay0.getMonth());
      assertEquals(2014, calDay0.getYear());
      assertEquals(1, calDay0.getDay());
      assertEquals(0, calDay0.getSizeAppts());
      assertTrue(calDay0.isValid());
      assertEquals(1, linkedList0.size());
      assertEquals(0, appt0.getRecurNumber());
      assertEquals(7, appt0.getStartDay());
      assertEquals(2, appt0.getRecurBy());
      assertEquals("Nmg4cO:lf`lExp3owa", appt0.getDescription());
      assertTrue(appt0.getValid());
      assertFalse(appt0.isRecurring());
      assertEquals(60, appt0.getStartYear());
      assertEquals("Nmg4cO:lf`lExp3owa", appt0.getTitle());
      assertEquals(7, appt0.getStartHour());
      assertEquals(7, appt0.getStartMinute());
      assertEquals(7, appt0.getStartMonth());
      assertEquals(0, appt0.getRecurIncrement());
      
      // Undeclared exception!
      try { 
        timeTable0.permute(linkedList0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 1
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TimeTable timeTable0 = new TimeTable();
      assertNotNull(timeTable0);
      
      LinkedList<Appt> linkedList0 = new LinkedList<Appt>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      boolean boolean0 = linkedList0.add((Appt) null);
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        timeTable0.permute(linkedList0, intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("calendar.TimeTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TimeTable timeTable0 = new TimeTable();
      assertNotNull(timeTable0);
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 0, 0);
      assertNotNull(mockGregorianCalendar0);
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=0,MONTH=0,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=0,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      
      TimeZone timeZone0 = TimeZone.getTimeZone("?0bs");
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar(timeZone0);
      assertFalse(mockGregorianCalendar1.equals((Object)mockGregorianCalendar0));
      assertNotNull(mockGregorianCalendar1);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar1.toString());
      assertTrue(mockGregorianCalendar1.isLenient());
      assertEquals(1, mockGregorianCalendar1.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar1.getFirstDayOfWeek());
      
      // Undeclared exception!
      timeTable0.getApptRange((LinkedList<Appt>) null, mockGregorianCalendar0, mockGregorianCalendar1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TimeTable timeTable0 = new TimeTable();
      assertNotNull(timeTable0);
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 0, 0, 0, 0, 0);
      assertNotNull(mockGregorianCalendar0);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=0,MONTH=0,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=0,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      
      TimeZone timeZone0 = TimeZone.getTimeZone("?0bs");
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      mockGregorianCalendar0.setLenient(false);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=false,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=0,MONTH=0,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=0,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertFalse(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar(timeZone0);
      assertFalse(mockGregorianCalendar1.equals((Object)mockGregorianCalendar0));
      assertNotNull(mockGregorianCalendar1);
      assertEquals("GMT", timeZone0.getID());
      assertEquals(1, mockGregorianCalendar1.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar1.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar1.toString());
      assertTrue(mockGregorianCalendar1.isLenient());
      
      // Undeclared exception!
      try { 
        timeTable0.getApptRange((LinkedList<Appt>) null, mockGregorianCalendar0, mockGregorianCalendar1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // YEAR
         //
         verifyException("java.util.GregorianCalendar", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TimeTable timeTable0 = new TimeTable();
      assertNotNull(timeTable0);
      
      LinkedList<Appt> linkedList0 = new LinkedList<Appt>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      boolean boolean0 = linkedList0.add((Appt) null);
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      
      boolean boolean1 = linkedList0.add((Appt) null);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(2, linkedList0.size());
      
      Appt appt0 = new Appt(7, 7, 7, 7, 7, "69GS8U[BSzvph%H10<Gg", "69GS8U[BSzvph%H10<Gg");
      assertEquals(2, Appt.RECUR_BY_MONTHLY);
      assertEquals(1, Appt.RECUR_BY_WEEKLY);
      assertEquals(0, Appt.RECUR_NUMBER_NEVER);
      assertEquals(3, Appt.RECUR_BY_YEARLY);
      assertEquals(1000, Appt.RECUR_NUMBER_FOREVER);
      assertNotNull(appt0);
      assertEquals("69GS8U[BSzvph%H10<Gg", appt0.getTitle());
      assertEquals(0, appt0.getRecurNumber());
      assertEquals(0, appt0.getRecurIncrement());
      assertEquals(7, appt0.getStartMinute());
      assertEquals(7, appt0.getStartMonth());
      assertEquals(7, appt0.getStartYear());
      assertEquals("69GS8U[BSzvph%H10<Gg", appt0.getDescription());
      assertEquals(7, appt0.getStartHour());
      assertFalse(appt0.isRecurring());
      assertEquals(2, appt0.getRecurBy());
      assertTrue(appt0.getValid());
      assertEquals(7, appt0.getStartDay());
      
      boolean boolean2 = linkedList0.add(appt0);
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertEquals(2, Appt.RECUR_BY_MONTHLY);
      assertEquals(1, Appt.RECUR_BY_WEEKLY);
      assertEquals(0, Appt.RECUR_NUMBER_NEVER);
      assertEquals(3, Appt.RECUR_BY_YEARLY);
      assertEquals(1000, Appt.RECUR_NUMBER_FOREVER);
      assertEquals(3, linkedList0.size());
      assertEquals("69GS8U[BSzvph%H10<Gg", appt0.getTitle());
      assertEquals(0, appt0.getRecurNumber());
      assertEquals(0, appt0.getRecurIncrement());
      assertEquals(7, appt0.getStartMinute());
      assertEquals(7, appt0.getStartMonth());
      assertEquals(7, appt0.getStartYear());
      assertEquals("69GS8U[BSzvph%H10<Gg", appt0.getDescription());
      assertEquals(7, appt0.getStartHour());
      assertFalse(appt0.isRecurring());
      assertEquals(2, appt0.getRecurBy());
      assertTrue(appt0.getValid());
      assertEquals(7, appt0.getStartDay());
      
      // Undeclared exception!
      try { 
        timeTable0.deleteAppt(linkedList0, appt0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("calendar.TimeTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TimeTable timeTable0 = new TimeTable();
      assertNotNull(timeTable0);
      
      LinkedList<Appt> linkedList0 = new LinkedList<Appt>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      int[] intArray0 = new int[25];
      LinkedList<Appt> linkedList1 = timeTable0.permute(linkedList0, intArray0);
      assertNotNull(linkedList1);
      assertEquals(0, linkedList0.size());
      assertEquals(0, linkedList1.size());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TimeTable timeTable0 = new TimeTable();
      assertNotNull(timeTable0);
      
      LinkedList<Appt> linkedList0 = new LinkedList<Appt>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      boolean boolean0 = linkedList0.add((Appt) null);
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      
      Appt appt0 = new Appt(7, 7, 7, 7, 7, "69GS8U[BSzvph%H1<Gg", "69GS8U[BSzvph%H1<Gg");
      assertEquals(1, Appt.RECUR_BY_WEEKLY);
      assertEquals(3, Appt.RECUR_BY_YEARLY);
      assertEquals(1000, Appt.RECUR_NUMBER_FOREVER);
      assertEquals(2, Appt.RECUR_BY_MONTHLY);
      assertEquals(0, Appt.RECUR_NUMBER_NEVER);
      assertNotNull(appt0);
      assertFalse(appt0.isRecurring());
      assertEquals(7, appt0.getStartMonth());
      assertEquals(0, appt0.getRecurNumber());
      assertEquals(7, appt0.getStartDay());
      assertEquals(2, appt0.getRecurBy());
      assertTrue(appt0.getValid());
      assertEquals(7, appt0.getStartMinute());
      assertEquals(0, appt0.getRecurIncrement());
      assertEquals(7, appt0.getStartYear());
      assertEquals("69GS8U[BSzvph%H1<Gg", appt0.getDescription());
      assertEquals(7, appt0.getStartHour());
      assertEquals("69GS8U[BSzvph%H1<Gg", appt0.getTitle());
      
      boolean boolean1 = linkedList0.add(appt0);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(1, Appt.RECUR_BY_WEEKLY);
      assertEquals(3, Appt.RECUR_BY_YEARLY);
      assertEquals(1000, Appt.RECUR_NUMBER_FOREVER);
      assertEquals(2, Appt.RECUR_BY_MONTHLY);
      assertEquals(0, Appt.RECUR_NUMBER_NEVER);
      assertEquals(2, linkedList0.size());
      assertFalse(appt0.isRecurring());
      assertEquals(7, appt0.getStartMonth());
      assertEquals(0, appt0.getRecurNumber());
      assertEquals(7, appt0.getStartDay());
      assertEquals(2, appt0.getRecurBy());
      assertTrue(appt0.getValid());
      assertEquals(7, appt0.getStartMinute());
      assertEquals(0, appt0.getRecurIncrement());
      assertEquals(7, appt0.getStartYear());
      assertEquals("69GS8U[BSzvph%H1<Gg", appt0.getDescription());
      assertEquals(7, appt0.getStartHour());
      assertEquals("69GS8U[BSzvph%H1<Gg", appt0.getTitle());
      
      boolean boolean2 = linkedList0.add(appt0);
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertEquals(1, Appt.RECUR_BY_WEEKLY);
      assertEquals(3, Appt.RECUR_BY_YEARLY);
      assertEquals(1000, Appt.RECUR_NUMBER_FOREVER);
      assertEquals(2, Appt.RECUR_BY_MONTHLY);
      assertEquals(0, Appt.RECUR_NUMBER_NEVER);
      assertEquals(3, linkedList0.size());
      assertFalse(appt0.isRecurring());
      assertEquals(7, appt0.getStartMonth());
      assertEquals(0, appt0.getRecurNumber());
      assertEquals(7, appt0.getStartDay());
      assertEquals(2, appt0.getRecurBy());
      assertTrue(appt0.getValid());
      assertEquals(7, appt0.getStartMinute());
      assertEquals(0, appt0.getRecurIncrement());
      assertEquals(7, appt0.getStartYear());
      assertEquals("69GS8U[BSzvph%H1<Gg", appt0.getDescription());
      assertEquals(7, appt0.getStartHour());
      assertEquals("69GS8U[BSzvph%H1<Gg", appt0.getTitle());
      
      LinkedList<Appt> linkedList1 = timeTable0.deleteAppt(linkedList0, appt0);
      assertSame(linkedList0, linkedList1);
      assertSame(linkedList1, linkedList0);
      assertEquals(1, Appt.RECUR_BY_WEEKLY);
      assertEquals(3, Appt.RECUR_BY_YEARLY);
      assertEquals(1000, Appt.RECUR_NUMBER_FOREVER);
      assertEquals(2, Appt.RECUR_BY_MONTHLY);
      assertEquals(0, Appt.RECUR_NUMBER_NEVER);
      assertNotNull(linkedList1);
      assertEquals(2, linkedList0.size());
      assertFalse(appt0.isRecurring());
      assertEquals(7, appt0.getStartMonth());
      assertEquals(0, appt0.getRecurNumber());
      assertEquals(7, appt0.getStartDay());
      assertEquals(2, appt0.getRecurBy());
      assertTrue(appt0.getValid());
      assertEquals(7, appt0.getStartMinute());
      assertEquals(0, appt0.getRecurIncrement());
      assertEquals(7, appt0.getStartYear());
      assertEquals("69GS8U[BSzvph%H1<Gg", appt0.getDescription());
      assertEquals(7, appt0.getStartHour());
      assertEquals("69GS8U[BSzvph%H1<Gg", appt0.getTitle());
      assertEquals(2, linkedList1.size());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TimeTable timeTable0 = new TimeTable();
      assertNotNull(timeTable0);
      
      LinkedList<Appt> linkedList0 = new LinkedList<Appt>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      boolean boolean0 = linkedList0.add((Appt) null);
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      
      Appt appt0 = new Appt((-2997), 1, 7, 3, 982, "69GS8U[BSzvph%H10<Gg", "69GS8U[BSzvph%H10<Gg");
      assertEquals(1, Appt.RECUR_BY_WEEKLY);
      assertEquals(0, Appt.RECUR_NUMBER_NEVER);
      assertEquals(2, Appt.RECUR_BY_MONTHLY);
      assertEquals(3, Appt.RECUR_BY_YEARLY);
      assertEquals(1000, Appt.RECUR_NUMBER_FOREVER);
      assertNotNull(appt0);
      assertEquals(0, appt0.getRecurIncrement());
      assertEquals(982, appt0.getStartYear());
      assertFalse(appt0.getValid());
      assertEquals(1, appt0.getStartMinute());
      assertFalse(appt0.isRecurring());
      assertEquals("69GS8U[BSzvph%H10<Gg", appt0.getDescription());
      assertEquals("69GS8U[BSzvph%H10<Gg", appt0.getTitle());
      assertEquals(0, appt0.getRecurNumber());
      assertEquals(3, appt0.getStartMonth());
      assertEquals(2, appt0.getRecurBy());
      assertEquals((-2997), appt0.getStartHour());
      assertEquals(7, appt0.getStartDay());
      
      boolean boolean1 = linkedList0.add(appt0);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(1, Appt.RECUR_BY_WEEKLY);
      assertEquals(0, Appt.RECUR_NUMBER_NEVER);
      assertEquals(2, Appt.RECUR_BY_MONTHLY);
      assertEquals(3, Appt.RECUR_BY_YEARLY);
      assertEquals(1000, Appt.RECUR_NUMBER_FOREVER);
      assertEquals(2, linkedList0.size());
      assertEquals(0, appt0.getRecurIncrement());
      assertEquals(982, appt0.getStartYear());
      assertFalse(appt0.getValid());
      assertEquals(1, appt0.getStartMinute());
      assertFalse(appt0.isRecurring());
      assertEquals("69GS8U[BSzvph%H10<Gg", appt0.getDescription());
      assertEquals("69GS8U[BSzvph%H10<Gg", appt0.getTitle());
      assertEquals(0, appt0.getRecurNumber());
      assertEquals(3, appt0.getStartMonth());
      assertEquals(2, appt0.getRecurBy());
      assertEquals((-2997), appt0.getStartHour());
      assertEquals(7, appt0.getStartDay());
      
      boolean boolean2 = linkedList0.add(appt0);
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertEquals(1, Appt.RECUR_BY_WEEKLY);
      assertEquals(0, Appt.RECUR_NUMBER_NEVER);
      assertEquals(2, Appt.RECUR_BY_MONTHLY);
      assertEquals(3, Appt.RECUR_BY_YEARLY);
      assertEquals(1000, Appt.RECUR_NUMBER_FOREVER);
      assertEquals(3, linkedList0.size());
      assertEquals(0, appt0.getRecurIncrement());
      assertEquals(982, appt0.getStartYear());
      assertFalse(appt0.getValid());
      assertEquals(1, appt0.getStartMinute());
      assertFalse(appt0.isRecurring());
      assertEquals("69GS8U[BSzvph%H10<Gg", appt0.getDescription());
      assertEquals("69GS8U[BSzvph%H10<Gg", appt0.getTitle());
      assertEquals(0, appt0.getRecurNumber());
      assertEquals(3, appt0.getStartMonth());
      assertEquals(2, appt0.getRecurBy());
      assertEquals((-2997), appt0.getStartHour());
      assertEquals(7, appt0.getStartDay());
      
      Appt appt1 = new Appt(7, 7, 7, 7, 7, "69GS8U[BSzvph%H10<Gg", "69GS8U[BSzvph%H10<Gg");
      assertFalse(appt1.equals((Object)appt0));
      assertEquals(1000, Appt.RECUR_NUMBER_FOREVER);
      assertEquals(3, Appt.RECUR_BY_YEARLY);
      assertEquals(2, Appt.RECUR_BY_MONTHLY);
      assertEquals(1, Appt.RECUR_BY_WEEKLY);
      assertEquals(0, Appt.RECUR_NUMBER_NEVER);
      assertNotNull(appt1);
      assertEquals(7, appt1.getStartYear());
      assertEquals("69GS8U[BSzvph%H10<Gg", appt1.getDescription());
      assertEquals(7, appt1.getStartMinute());
      assertFalse(appt1.isRecurring());
      assertTrue(appt1.getValid());
      assertEquals(2, appt1.getRecurBy());
      assertEquals(0, appt1.getRecurNumber());
      assertEquals("69GS8U[BSzvph%H10<Gg", appt1.getTitle());
      assertEquals(7, appt1.getStartDay());
      assertEquals(0, appt1.getRecurIncrement());
      assertEquals(7, appt1.getStartMonth());
      assertEquals(7, appt1.getStartHour());
      
      LinkedList<Appt> linkedList1 = timeTable0.deleteAppt(linkedList0, appt1);
      assertFalse(appt1.equals((Object)appt0));
      assertNotSame(appt1, appt0);
      assertEquals(1000, Appt.RECUR_NUMBER_FOREVER);
      assertEquals(3, Appt.RECUR_BY_YEARLY);
      assertEquals(2, Appt.RECUR_BY_MONTHLY);
      assertEquals(1, Appt.RECUR_BY_WEEKLY);
      assertEquals(0, Appt.RECUR_NUMBER_NEVER);
      assertNull(linkedList1);
      assertEquals(3, linkedList0.size());
      assertEquals(7, appt1.getStartYear());
      assertEquals("69GS8U[BSzvph%H10<Gg", appt1.getDescription());
      assertEquals(7, appt1.getStartMinute());
      assertFalse(appt1.isRecurring());
      assertTrue(appt1.getValid());
      assertEquals(2, appt1.getRecurBy());
      assertEquals(0, appt1.getRecurNumber());
      assertEquals("69GS8U[BSzvph%H10<Gg", appt1.getTitle());
      assertEquals(7, appt1.getStartDay());
      assertEquals(0, appt1.getRecurIncrement());
      assertEquals(7, appt1.getStartMonth());
      assertEquals(7, appt1.getStartHour());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TimeTable timeTable0 = new TimeTable();
      assertNotNull(timeTable0);
      
      LinkedList<Appt> linkedList0 = new LinkedList<Appt>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Appt appt0 = new Appt(1, 1, 1, 1, 1, "", "");
      assertEquals(2, Appt.RECUR_BY_MONTHLY);
      assertEquals(1000, Appt.RECUR_NUMBER_FOREVER);
      assertEquals(3, Appt.RECUR_BY_YEARLY);
      assertEquals(0, Appt.RECUR_NUMBER_NEVER);
      assertEquals(1, Appt.RECUR_BY_WEEKLY);
      assertNotNull(appt0);
      assertEquals(0, appt0.getRecurNumber());
      assertEquals(1, appt0.getStartMinute());
      assertEquals(2, appt0.getRecurBy());
      assertEquals(1, appt0.getStartMonth());
      assertFalse(appt0.isRecurring());
      assertEquals(1, appt0.getStartDay());
      assertTrue(appt0.getValid());
      assertEquals("", appt0.getTitle());
      assertEquals("", appt0.getDescription());
      assertEquals(1, appt0.getStartHour());
      assertEquals(1, appt0.getStartYear());
      assertEquals(0, appt0.getRecurIncrement());
      
      LinkedList<Appt> linkedList1 = timeTable0.deleteAppt(linkedList0, appt0);
      assertEquals(2, Appt.RECUR_BY_MONTHLY);
      assertEquals(1000, Appt.RECUR_NUMBER_FOREVER);
      assertEquals(3, Appt.RECUR_BY_YEARLY);
      assertEquals(0, Appt.RECUR_NUMBER_NEVER);
      assertEquals(1, Appt.RECUR_BY_WEEKLY);
      assertNull(linkedList1);
      assertEquals(0, linkedList0.size());
      assertEquals(0, appt0.getRecurNumber());
      assertEquals(1, appt0.getStartMinute());
      assertEquals(2, appt0.getRecurBy());
      assertEquals(1, appt0.getStartMonth());
      assertFalse(appt0.isRecurring());
      assertEquals(1, appt0.getStartDay());
      assertTrue(appt0.getValid());
      assertEquals("", appt0.getTitle());
      assertEquals("", appt0.getDescription());
      assertEquals(1, appt0.getStartHour());
      assertEquals(1, appt0.getStartYear());
      assertEquals(0, appt0.getRecurIncrement());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TimeTable timeTable0 = new TimeTable();
      assertNotNull(timeTable0);
      
      LinkedList<Appt> linkedList0 = new LinkedList<Appt>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      LinkedList<Appt> linkedList1 = timeTable0.deleteAppt(linkedList0, (Appt) null);
      assertNull(linkedList1);
      assertEquals(0, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TimeTable timeTable0 = new TimeTable();
      assertNotNull(timeTable0);
      
      LinkedList<Appt> linkedList0 = new LinkedList<Appt>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Appt appt0 = new Appt((-1), 10, 10, 10, 10, "", "");
      assertEquals(1, Appt.RECUR_BY_WEEKLY);
      assertEquals(2, Appt.RECUR_BY_MONTHLY);
      assertEquals(3, Appt.RECUR_BY_YEARLY);
      assertEquals(1000, Appt.RECUR_NUMBER_FOREVER);
      assertEquals(0, Appt.RECUR_NUMBER_NEVER);
      assertNotNull(appt0);
      assertEquals((-1), appt0.getStartHour());
      assertEquals(0, appt0.getRecurIncrement());
      assertEquals(10, appt0.getStartYear());
      assertEquals("", appt0.getDescription());
      assertEquals(0, appt0.getRecurNumber());
      assertEquals(10, appt0.getStartDay());
      assertEquals("", appt0.getTitle());
      assertEquals(2, appt0.getRecurBy());
      assertEquals(10, appt0.getStartMonth());
      assertFalse(appt0.isRecurring());
      assertFalse(appt0.getValid());
      assertEquals(10, appt0.getStartMinute());
      
      LinkedList<Appt> linkedList1 = timeTable0.deleteAppt(linkedList0, appt0);
      assertEquals(1, Appt.RECUR_BY_WEEKLY);
      assertEquals(2, Appt.RECUR_BY_MONTHLY);
      assertEquals(3, Appt.RECUR_BY_YEARLY);
      assertEquals(1000, Appt.RECUR_NUMBER_FOREVER);
      assertEquals(0, Appt.RECUR_NUMBER_NEVER);
      assertNull(linkedList1);
      assertEquals(0, linkedList0.size());
      assertEquals((-1), appt0.getStartHour());
      assertEquals(0, appt0.getRecurIncrement());
      assertEquals(10, appt0.getStartYear());
      assertEquals("", appt0.getDescription());
      assertEquals(0, appt0.getRecurNumber());
      assertEquals(10, appt0.getStartDay());
      assertEquals("", appt0.getTitle());
      assertEquals(2, appt0.getRecurBy());
      assertEquals(10, appt0.getStartMonth());
      assertFalse(appt0.isRecurring());
      assertFalse(appt0.getValid());
      assertEquals(10, appt0.getStartMinute());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TimeTable timeTable0 = new TimeTable();
      assertNotNull(timeTable0);
      
      Appt appt0 = new Appt((-1), 10, 10, 10, 10, "", "");
      assertEquals(1, Appt.RECUR_BY_WEEKLY);
      assertEquals(2, Appt.RECUR_BY_MONTHLY);
      assertEquals(1000, Appt.RECUR_NUMBER_FOREVER);
      assertEquals(3, Appt.RECUR_BY_YEARLY);
      assertEquals(0, Appt.RECUR_NUMBER_NEVER);
      assertNotNull(appt0);
      assertEquals(10, appt0.getStartMinute());
      assertEquals(0, appt0.getRecurIncrement());
      assertEquals(0, appt0.getRecurNumber());
      assertEquals((-1), appt0.getStartHour());
      assertEquals(10, appt0.getStartYear());
      assertEquals(2, appt0.getRecurBy());
      assertFalse(appt0.isRecurring());
      assertEquals(10, appt0.getStartMonth());
      assertEquals("", appt0.getTitle());
      assertEquals(10, appt0.getStartDay());
      assertEquals("", appt0.getDescription());
      assertFalse(appt0.getValid());
      
      LinkedList<Appt> linkedList0 = timeTable0.deleteAppt((LinkedList<Appt>) null, appt0);
      assertEquals(1, Appt.RECUR_BY_WEEKLY);
      assertEquals(2, Appt.RECUR_BY_MONTHLY);
      assertEquals(1000, Appt.RECUR_NUMBER_FOREVER);
      assertEquals(3, Appt.RECUR_BY_YEARLY);
      assertEquals(0, Appt.RECUR_NUMBER_NEVER);
      assertNull(linkedList0);
      assertEquals(10, appt0.getStartMinute());
      assertEquals(0, appt0.getRecurIncrement());
      assertEquals(0, appt0.getRecurNumber());
      assertEquals((-1), appt0.getStartHour());
      assertEquals(10, appt0.getStartYear());
      assertEquals(2, appt0.getRecurBy());
      assertFalse(appt0.isRecurring());
      assertEquals(10, appt0.getStartMonth());
      assertEquals("", appt0.getTitle());
      assertEquals(10, appt0.getStartDay());
      assertEquals("", appt0.getDescription());
      assertFalse(appt0.getValid());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TimeTable timeTable0 = new TimeTable();
      assertNotNull(timeTable0);
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      assertNotNull(mockGregorianCalendar0);
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      
      CalDay calDay0 = new CalDay(mockGregorianCalendar0);
      assertNotNull(calDay0);
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, calDay0.getDay());
      assertEquals(2014, calDay0.getYear());
      assertEquals(1, calDay0.getMonth());
      assertTrue(calDay0.isValid());
      assertEquals((-1), calDay0.getSizeAppts());
      
      LinkedList<Appt> linkedList0 = calDay0.appts;
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Appt appt0 = new Appt(1, 1, 1, 1, 1, "Second date specified is not  before the first date specified.", "");
      assertEquals(2, Appt.RECUR_BY_MONTHLY);
      assertEquals(0, Appt.RECUR_NUMBER_NEVER);
      assertEquals(3, Appt.RECUR_BY_YEARLY);
      assertEquals(1000, Appt.RECUR_NUMBER_FOREVER);
      assertEquals(1, Appt.RECUR_BY_WEEKLY);
      assertNotNull(appt0);
      assertEquals(2, appt0.getRecurBy());
      assertEquals(1, appt0.getStartYear());
      assertEquals(0, appt0.getRecurNumber());
      assertEquals(1, appt0.getStartMinute());
      assertEquals("Second date specified is not  before the first date specified.", appt0.getTitle());
      assertFalse(appt0.isRecurring());
      assertEquals(1, appt0.getStartDay());
      assertEquals(1, appt0.getStartMonth());
      assertTrue(appt0.getValid());
      assertEquals(0, appt0.getRecurIncrement());
      assertEquals(1, appt0.getStartHour());
      assertEquals("", appt0.getDescription());
      
      int[] intArray0 = new int[2];
      appt0.setRecurrence(intArray0, (-226), 1, 7);
      assertEquals(2, Appt.RECUR_BY_MONTHLY);
      assertEquals(0, Appt.RECUR_NUMBER_NEVER);
      assertEquals(3, Appt.RECUR_BY_YEARLY);
      assertEquals(1000, Appt.RECUR_NUMBER_FOREVER);
      assertEquals(1, Appt.RECUR_BY_WEEKLY);
      assertEquals(1, appt0.getStartYear());
      assertEquals(1, appt0.getStartMinute());
      assertTrue(appt0.isRecurring());
      assertEquals("Second date specified is not  before the first date specified.", appt0.getTitle());
      assertEquals((-226), appt0.getRecurBy());
      assertEquals(1, appt0.getStartDay());
      assertEquals(7, appt0.getRecurNumber());
      assertEquals(1, appt0.getStartMonth());
      assertTrue(appt0.getValid());
      assertEquals(1, appt0.getRecurIncrement());
      assertEquals(1, appt0.getStartHour());
      assertEquals("", appt0.getDescription());
      assertArrayEquals(new int[] {0, 0}, intArray0);
      
      boolean boolean0 = linkedList0.add(appt0);
      assertTrue(boolean0);
      assertEquals(2, Appt.RECUR_BY_MONTHLY);
      assertEquals(0, Appt.RECUR_NUMBER_NEVER);
      assertEquals(3, Appt.RECUR_BY_YEARLY);
      assertEquals(1000, Appt.RECUR_NUMBER_FOREVER);
      assertEquals(1, Appt.RECUR_BY_WEEKLY);
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, calDay0.getDay());
      assertEquals(2014, calDay0.getYear());
      assertEquals(1, calDay0.getMonth());
      assertTrue(calDay0.isValid());
      assertEquals(0, calDay0.getSizeAppts());
      assertEquals(1, linkedList0.size());
      assertEquals(1, appt0.getStartYear());
      assertEquals(1, appt0.getStartMinute());
      assertTrue(appt0.isRecurring());
      assertEquals("Second date specified is not  before the first date specified.", appt0.getTitle());
      assertEquals((-226), appt0.getRecurBy());
      assertEquals(1, appt0.getStartDay());
      assertEquals(7, appt0.getRecurNumber());
      assertEquals(1, appt0.getStartMonth());
      assertTrue(appt0.getValid());
      assertEquals(1, appt0.getRecurIncrement());
      assertEquals(1, appt0.getStartHour());
      assertEquals("", appt0.getDescription());
      
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar(2817, 2, 2817, 2817, 2817);
      assertFalse(mockGregorianCalendar1.equals((Object)mockGregorianCalendar0));
      assertNotNull(mockGregorianCalendar1);
      assertTrue(mockGregorianCalendar1.isLenient());
      assertEquals(1, mockGregorianCalendar1.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=2817,MONTH=2,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=2817,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=2817,HOUR_OF_DAY=2817,MINUTE=2817,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar1.toString());
      assertEquals(1, mockGregorianCalendar1.getMinimalDaysInFirstWeek());
      
      // Undeclared exception!
      try { 
        timeTable0.getApptRange(linkedList0, mockGregorianCalendar1, mockGregorianCalendar0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("calendar.TimeTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TimeTable timeTable0 = new TimeTable();
      assertNotNull(timeTable0);
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      assertNotNull(mockGregorianCalendar0);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      
      CalDay calDay0 = new CalDay(mockGregorianCalendar0);
      assertNotNull(calDay0);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals((-1), calDay0.getSizeAppts());
      assertTrue(calDay0.isValid());
      assertEquals(1, calDay0.getMonth());
      assertEquals(2014, calDay0.getYear());
      assertEquals(1, calDay0.getDay());
      
      LinkedList<Appt> linkedList0 = calDay0.appts;
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Appt appt0 = new Appt(2, 2, 2, 2, 2, "Second date specified is not  before the first date specified.", "Second date specified is not  before the first date specified.");
      assertEquals(2, Appt.RECUR_BY_MONTHLY);
      assertEquals(1, Appt.RECUR_BY_WEEKLY);
      assertEquals(0, Appt.RECUR_NUMBER_NEVER);
      assertEquals(1000, Appt.RECUR_NUMBER_FOREVER);
      assertEquals(3, Appt.RECUR_BY_YEARLY);
      assertNotNull(appt0);
      assertEquals(2, appt0.getStartYear());
      assertEquals(2, appt0.getRecurBy());
      assertEquals(0, appt0.getRecurNumber());
      assertEquals(0, appt0.getRecurIncrement());
      assertEquals(2, appt0.getStartHour());
      assertEquals("Second date specified is not  before the first date specified.", appt0.getTitle());
      assertEquals("Second date specified is not  before the first date specified.", appt0.getDescription());
      assertTrue(appt0.getValid());
      assertEquals(2, appt0.getStartDay());
      assertEquals(2, appt0.getStartMinute());
      assertEquals(2, appt0.getStartMonth());
      assertFalse(appt0.isRecurring());
      
      int[] intArray0 = new int[2];
      appt0.setRecurrence(intArray0, 3, 2, 1000);
      assertEquals(2, Appt.RECUR_BY_MONTHLY);
      assertEquals(1, Appt.RECUR_BY_WEEKLY);
      assertEquals(0, Appt.RECUR_NUMBER_NEVER);
      assertEquals(1000, Appt.RECUR_NUMBER_FOREVER);
      assertEquals(3, Appt.RECUR_BY_YEARLY);
      assertEquals(3, appt0.getRecurBy());
      assertEquals(2, appt0.getStartYear());
      assertTrue(appt0.isRecurring());
      assertEquals(2, appt0.getStartHour());
      assertEquals("Second date specified is not  before the first date specified.", appt0.getTitle());
      assertEquals(2, appt0.getRecurIncrement());
      assertEquals("Second date specified is not  before the first date specified.", appt0.getDescription());
      assertTrue(appt0.getValid());
      assertEquals(1000, appt0.getRecurNumber());
      assertEquals(2, appt0.getStartDay());
      assertEquals(2, appt0.getStartMinute());
      assertEquals(2, appt0.getStartMonth());
      assertArrayEquals(new int[] {0, 0}, intArray0);
      
      boolean boolean0 = linkedList0.add(appt0);
      assertTrue(boolean0);
      assertEquals(2, Appt.RECUR_BY_MONTHLY);
      assertEquals(1, Appt.RECUR_BY_WEEKLY);
      assertEquals(0, Appt.RECUR_NUMBER_NEVER);
      assertEquals(1000, Appt.RECUR_NUMBER_FOREVER);
      assertEquals(3, Appt.RECUR_BY_YEARLY);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertTrue(calDay0.isValid());
      assertEquals(0, calDay0.getSizeAppts());
      assertEquals(1, calDay0.getMonth());
      assertEquals(2014, calDay0.getYear());
      assertEquals(1, calDay0.getDay());
      assertEquals(1, linkedList0.size());
      assertEquals(3, appt0.getRecurBy());
      assertEquals(2, appt0.getStartYear());
      assertTrue(appt0.isRecurring());
      assertEquals(2, appt0.getStartHour());
      assertEquals("Second date specified is not  before the first date specified.", appt0.getTitle());
      assertEquals(2, appt0.getRecurIncrement());
      assertEquals("Second date specified is not  before the first date specified.", appt0.getDescription());
      assertTrue(appt0.getValid());
      assertEquals(1000, appt0.getRecurNumber());
      assertEquals(2, appt0.getStartDay());
      assertEquals(2, appt0.getStartMinute());
      assertEquals(2, appt0.getStartMonth());
      
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar(2817, 2, 2817, 2817, 2817);
      assertFalse(mockGregorianCalendar1.equals((Object)mockGregorianCalendar0));
      assertNotNull(mockGregorianCalendar1);
      assertTrue(mockGregorianCalendar1.isLenient());
      assertEquals(1, mockGregorianCalendar1.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=2817,MONTH=2,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=2817,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=2817,HOUR_OF_DAY=2817,MINUTE=2817,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar1.toString());
      assertEquals(1, mockGregorianCalendar1.getFirstDayOfWeek());
      
      LinkedList<CalDay> linkedList1 = timeTable0.getApptRange(linkedList0, mockGregorianCalendar1, mockGregorianCalendar0);
      assertFalse(mockGregorianCalendar0.equals((Object)mockGregorianCalendar1));
      assertFalse(mockGregorianCalendar1.equals((Object)mockGregorianCalendar0));
      assertNotSame(mockGregorianCalendar0, mockGregorianCalendar1);
      assertNotSame(mockGregorianCalendar1, mockGregorianCalendar0);
      assertNotNull(linkedList1);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertTrue(calDay0.isValid());
      assertEquals(0, calDay0.getSizeAppts());
      assertEquals(1, calDay0.getMonth());
      assertEquals(2014, calDay0.getYear());
      assertEquals(1, calDay0.getDay());
      assertEquals(1, linkedList0.size());
      assertTrue(mockGregorianCalendar1.isLenient());
      assertEquals(1, mockGregorianCalendar1.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=2817,MONTH=2,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=2817,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=2817,HOUR_OF_DAY=2817,MINUTE=2817,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar1.toString());
      assertEquals(1, mockGregorianCalendar1.getFirstDayOfWeek());
      assertEquals(1, linkedList1.size());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TimeTable timeTable0 = new TimeTable();
      assertNotNull(timeTable0);
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      assertNotNull(mockGregorianCalendar0);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      
      CalDay calDay0 = new CalDay(mockGregorianCalendar0);
      assertNotNull(calDay0);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, calDay0.getMonth());
      assertEquals((-1), calDay0.getSizeAppts());
      assertEquals(1, calDay0.getDay());
      assertTrue(calDay0.isValid());
      assertEquals(2014, calDay0.getYear());
      
      LinkedList<Appt> linkedList0 = calDay0.appts;
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Appt appt0 = new Appt(2, 2, 2, 2, 2, "Second date specified is not  before the first date specified.", "Second date specified is not  before the first date specified.");
      assertEquals(1, Appt.RECUR_BY_WEEKLY);
      assertEquals(3, Appt.RECUR_BY_YEARLY);
      assertEquals(1000, Appt.RECUR_NUMBER_FOREVER);
      assertEquals(2, Appt.RECUR_BY_MONTHLY);
      assertEquals(0, Appt.RECUR_NUMBER_NEVER);
      assertNotNull(appt0);
      assertEquals(0, appt0.getRecurIncrement());
      assertEquals(2, appt0.getStartMonth());
      assertTrue(appt0.getValid());
      assertEquals(0, appt0.getRecurNumber());
      assertEquals("Second date specified is not  before the first date specified.", appt0.getDescription());
      assertEquals(2, appt0.getStartDay());
      assertEquals(2, appt0.getRecurBy());
      assertFalse(appt0.isRecurring());
      assertEquals(2, appt0.getStartMinute());
      assertEquals("Second date specified is not  before the first date specified.", appt0.getTitle());
      assertEquals(2, appt0.getStartHour());
      assertEquals(2, appt0.getStartYear());
      
      int[] intArray0 = new int[2];
      appt0.setRecurrence(intArray0, 3, 2, (-226));
      assertEquals(1, Appt.RECUR_BY_WEEKLY);
      assertEquals(3, Appt.RECUR_BY_YEARLY);
      assertEquals(1000, Appt.RECUR_NUMBER_FOREVER);
      assertEquals(2, Appt.RECUR_BY_MONTHLY);
      assertEquals(0, Appt.RECUR_NUMBER_NEVER);
      assertEquals((-226), appt0.getRecurNumber());
      assertEquals(2, appt0.getStartMonth());
      assertTrue(appt0.getValid());
      assertTrue(appt0.isRecurring());
      assertEquals("Second date specified is not  before the first date specified.", appt0.getDescription());
      assertEquals(2, appt0.getStartDay());
      assertEquals(2, appt0.getStartMinute());
      assertEquals("Second date specified is not  before the first date specified.", appt0.getTitle());
      assertEquals(3, appt0.getRecurBy());
      assertEquals(2, appt0.getStartHour());
      assertEquals(2, appt0.getRecurIncrement());
      assertEquals(2, appt0.getStartYear());
      assertArrayEquals(new int[] {0, 0}, intArray0);
      
      boolean boolean0 = linkedList0.add(appt0);
      assertTrue(boolean0);
      assertEquals(1, Appt.RECUR_BY_WEEKLY);
      assertEquals(3, Appt.RECUR_BY_YEARLY);
      assertEquals(1000, Appt.RECUR_NUMBER_FOREVER);
      assertEquals(2, Appt.RECUR_BY_MONTHLY);
      assertEquals(0, Appt.RECUR_NUMBER_NEVER);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, calDay0.getMonth());
      assertEquals(0, calDay0.getSizeAppts());
      assertEquals(1, calDay0.getDay());
      assertTrue(calDay0.isValid());
      assertEquals(2014, calDay0.getYear());
      assertEquals(1, linkedList0.size());
      assertEquals((-226), appt0.getRecurNumber());
      assertEquals(2, appt0.getStartMonth());
      assertTrue(appt0.getValid());
      assertTrue(appt0.isRecurring());
      assertEquals("Second date specified is not  before the first date specified.", appt0.getDescription());
      assertEquals(2, appt0.getStartDay());
      assertEquals(2, appt0.getStartMinute());
      assertEquals("Second date specified is not  before the first date specified.", appt0.getTitle());
      assertEquals(3, appt0.getRecurBy());
      assertEquals(2, appt0.getStartHour());
      assertEquals(2, appt0.getRecurIncrement());
      assertEquals(2, appt0.getStartYear());
      
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar(2817, 2, 2817, 2817, 2817);
      assertFalse(mockGregorianCalendar1.equals((Object)mockGregorianCalendar0));
      assertNotNull(mockGregorianCalendar1);
      assertTrue(mockGregorianCalendar1.isLenient());
      assertEquals(1, mockGregorianCalendar1.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=2817,MONTH=2,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=2817,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=2817,HOUR_OF_DAY=2817,MINUTE=2817,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar1.toString());
      assertEquals(1, mockGregorianCalendar1.getMinimalDaysInFirstWeek());
      
      LinkedList<CalDay> linkedList1 = timeTable0.getApptRange(linkedList0, mockGregorianCalendar1, mockGregorianCalendar0);
      assertFalse(mockGregorianCalendar0.equals((Object)mockGregorianCalendar1));
      assertFalse(mockGregorianCalendar1.equals((Object)mockGregorianCalendar0));
      assertNotSame(mockGregorianCalendar0, mockGregorianCalendar1);
      assertNotSame(mockGregorianCalendar1, mockGregorianCalendar0);
      assertNotNull(linkedList1);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, calDay0.getMonth());
      assertEquals(0, calDay0.getSizeAppts());
      assertEquals(1, calDay0.getDay());
      assertTrue(calDay0.isValid());
      assertEquals(2014, calDay0.getYear());
      assertEquals(1, linkedList0.size());
      assertTrue(mockGregorianCalendar1.isLenient());
      assertEquals(1, mockGregorianCalendar1.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=2817,MONTH=2,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=2817,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=2817,HOUR_OF_DAY=2817,MINUTE=2817,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar1.toString());
      assertEquals(1, mockGregorianCalendar1.getMinimalDaysInFirstWeek());
      assertEquals(1, linkedList1.size());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TimeTable timeTable0 = new TimeTable();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      CalDay calDay0 = new CalDay(mockGregorianCalendar0);
      LinkedList<Appt> linkedList0 = calDay0.appts;
      Appt appt0 = new Appt(2817, 2817, 2817, 4, 2817, "dVS\u0003}vn>K@", "dVS\u0003}vn>K@");
      linkedList0.add(appt0);
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar(2817, 2, 2817, 2817, 2817);
      LinkedList<CalDay> linkedList1 = timeTable0.getApptRange(linkedList0, mockGregorianCalendar1, mockGregorianCalendar0);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=2817,MONTH=2,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=2817,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=2817,HOUR_OF_DAY=2817,MINUTE=2817,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar1.toString());
      assertEquals(1, linkedList1.size());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TimeTable timeTable0 = new TimeTable();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      CalDay calDay0 = new CalDay(mockGregorianCalendar0);
      LinkedList<Appt> linkedList0 = calDay0.appts;
      Appt appt0 = new Appt(2, 2, 2, 2, 2, "Second date specified is not  before the first date specified.", "Second date specified is not  before the first date specified.");
      linkedList0.add(appt0);
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar(2817, 2, 2817, 2817, 2817);
      // Undeclared exception!
      try { 
        timeTable0.getApptRange(linkedList0, mockGregorianCalendar1, mockGregorianCalendar0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("calendar.TimeTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TimeTable timeTable0 = new TimeTable();
      LinkedList<Appt> linkedList0 = new LinkedList<Appt>();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      try { 
        timeTable0.getApptRange(linkedList0, mockGregorianCalendar0, mockGregorianCalendar0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Second date specified is not  before the first date specified.
         //
         verifyException("calendar.TimeTable", e);
      }
  }
}
