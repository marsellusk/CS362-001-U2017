/*
 * This file was automatically generated by EvoSuite
 * Tue Aug 08 01:23:47 GMT 2017
 */

package calendar;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import calendar.Appt;
import calendar.CalDay;
import java.util.GregorianCalendar;
import java.util.LinkedList;
import java.util.Locale;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CalDay_ESTest extends CalDay_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      Locale locale0 = Locale.JAPAN;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0, locale0);
      CalDay calDay0 = new CalDay(mockGregorianCalendar0);
      LinkedList<Appt> linkedList0 = new LinkedList<Appt>();
      calDay0.appts = linkedList0;
      Appt appt0 = new Appt(0, 1, 2, 1, 0, "am", "%@eqC|6(cI");
      linkedList0.add(appt0);
      Appt appt1 = new Appt(1, 0, 1, 1, 1, "6!IXy", "l\"4E,`");
      calDay0.addAppt(appt1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CalDay calDay0 = new CalDay();
      LinkedList<Appt> linkedList0 = new LinkedList<Appt>();
      calDay0.valid = true;
      calDay0.appts = linkedList0;
      calDay0.iterator();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CalDay calDay0 = new CalDay();
      calDay0.valid = true;
      calDay0.isValid();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      CalDay calDay0 = new CalDay(mockGregorianCalendar0);
      calDay0.getYear();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CalDay calDay0 = new CalDay();
      calDay0.year = (-1437);
      calDay0.getYear();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      CalDay calDay0 = new CalDay(mockGregorianCalendar0);
      LinkedList<Appt> linkedList0 = calDay0.appts;
      Appt appt0 = new Appt(1, 1, 1, 1, 1, (String) null, ":");
      linkedList0.push(appt0);
      calDay0.getSizeAppts();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CalDay calDay0 = new CalDay();
      LinkedList<Appt> linkedList0 = new LinkedList<Appt>();
      calDay0.appts = linkedList0;
      Appt appt0 = new Appt(4584, 395, 2865, 0, (-2237), "KfyJk;g%A5?K]", "KfyJk;g%A5?K]");
      linkedList0.add(appt0);
      linkedList0.add(appt0);
      calDay0.getSizeAppts();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      CalDay calDay0 = new CalDay(mockGregorianCalendar0);
      calDay0.getSizeAppts();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CalDay calDay0 = new CalDay();
      calDay0.month = 2865;
      calDay0.getMonth();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CalDay calDay0 = new CalDay();
      calDay0.month = (-1437);
      calDay0.getMonth();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CalDay calDay0 = new CalDay();
      calDay0.getDay();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CalDay calDay0 = new CalDay();
      calDay0.month = (-1437);
      calDay0.getDay();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CalDay calDay0 = new CalDay();
      LinkedList<Appt> linkedList0 = new LinkedList<Appt>();
      calDay0.appts = linkedList0;
      calDay0.getAppts();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      Locale locale0 = Locale.JAPAN;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0, locale0);
      CalDay calDay0 = new CalDay(mockGregorianCalendar0);
      LinkedList<Appt> linkedList0 = new LinkedList<Appt>();
      calDay0.appts = linkedList0;
      Appt appt0 = new Appt(0, 1, 2, 1, 0, "am", "%@eqC|6(cI");
      linkedList0.add(appt0);
      calDay0.getAppts();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CalDay calDay0 = new CalDay();
      calDay0.valid = true;
      // Undeclared exception!
      try { 
        calDay0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("calendar.CalDay", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CalDay calDay0 = new CalDay();
      // Undeclared exception!
      try { 
        calDay0.addAppt((Appt) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("calendar.CalDay", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CalDay calDay0 = null;
      try {
        calDay0 = new CalDay((GregorianCalendar) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("calendar.CalDay", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(2761, 13, 2761, 1, 1, 13);
      mockGregorianCalendar0.setLenient(false);
      CalDay calDay0 = null;
      try {
        calDay0 = new CalDay(mockGregorianCalendar0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // MONTH
         //
         verifyException("java.util.GregorianCalendar", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CalDay calDay0 = new CalDay();
      calDay0.isValid();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CalDay calDay0 = new CalDay();
      calDay0.getAppts();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CalDay calDay0 = new CalDay();
      calDay0.getYear();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CalDay calDay0 = new CalDay();
      calDay0.getMonth();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      Locale locale0 = Locale.JAPAN;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0, locale0);
      CalDay calDay0 = new CalDay(mockGregorianCalendar0);
      LinkedList<Appt> linkedList0 = new LinkedList<Appt>();
      calDay0.appts = linkedList0;
      Appt appt0 = new Appt(0, 1, 2, 1, 0, "am", "%@eqC|6(cI");
      linkedList0.add(appt0);
      calDay0.toString();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CalDay calDay0 = new CalDay();
      calDay0.toString();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CalDay calDay0 = new CalDay();
      calDay0.valid = true;
      // Undeclared exception!
      try { 
        calDay0.iterator();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("calendar.CalDay", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      CalDay calDay0 = new CalDay();
      calDay0.iterator();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      CalDay calDay0 = new CalDay(mockGregorianCalendar0);
      LinkedList<Appt> linkedList0 = calDay0.appts;
      Appt appt0 = new Appt(504, 504, 504, 5, 504, " &kOoU'WnpE", " &kOoU'WnpE");
      linkedList0.add(appt0);
      Appt appt1 = new Appt(5, 5, 5, 5, 5, " &kOoU'WnpE", " &kOoU'WnpE");
      calDay0.addAppt(appt1);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      Locale locale0 = Locale.JAPAN;
      assertEquals("", locale0.getVariant());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JP", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JPN", locale0.getISO3Country());
      assertNotNull(locale0);
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0, locale0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("", locale0.getVariant());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JP", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertNotNull(mockGregorianCalendar0);
      
      CalDay calDay0 = new CalDay(mockGregorianCalendar0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("", locale0.getVariant());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JP", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertTrue(calDay0.isValid());
      assertEquals((-1), calDay0.getSizeAppts());
      assertEquals(1, calDay0.getMonth());
      assertEquals(2014, calDay0.getYear());
      assertEquals(1, calDay0.getDay());
      assertNotNull(calDay0);
      
      LinkedList<Appt> linkedList0 = new LinkedList<Appt>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      calDay0.appts = linkedList0;
      assertEquals("GMT", timeZone0.getID());
      assertEquals("", locale0.getVariant());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JP", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertTrue(calDay0.isValid());
      assertEquals((-1), calDay0.getSizeAppts());
      assertEquals(1, calDay0.getMonth());
      assertEquals(2014, calDay0.getYear());
      assertEquals(1, calDay0.getDay());
      assertEquals(0, linkedList0.size());
      assertEquals(0, calDay0.appts.size());
      
      Appt appt0 = new Appt(0, 1, 2, 1, 0, "am", "%@eqC|6(cI");
      assertEquals(0, appt0.getRecurNumber());
      assertEquals(0, appt0.getStartYear());
      assertEquals(2, appt0.getRecurBy());
      assertEquals("am", appt0.getTitle());
      assertFalse(appt0.isRecurring());
      assertEquals(1, appt0.getStartMonth());
      assertEquals(1, appt0.getStartMinute());
      assertTrue(appt0.getValid());
      assertEquals(0, appt0.getRecurIncrement());
      assertEquals(0, appt0.getStartHour());
      assertEquals("%@eqC|6(cI", appt0.getDescription());
      assertEquals(2, appt0.getStartDay());
      assertEquals(0, Appt.RECUR_NUMBER_NEVER);
      assertEquals(3, Appt.RECUR_BY_YEARLY);
      assertEquals(1000, Appt.RECUR_NUMBER_FOREVER);
      assertEquals(1, Appt.RECUR_BY_WEEKLY);
      assertEquals(2, Appt.RECUR_BY_MONTHLY);
      assertNotNull(appt0);
      
      boolean boolean0 = linkedList0.add(appt0);
      assertEquals(1, linkedList0.size());
      assertEquals(0, appt0.getRecurNumber());
      assertEquals(0, appt0.getStartYear());
      assertEquals(2, appt0.getRecurBy());
      assertEquals("am", appt0.getTitle());
      assertFalse(appt0.isRecurring());
      assertEquals(1, appt0.getStartMonth());
      assertEquals(1, appt0.getStartMinute());
      assertTrue(appt0.getValid());
      assertEquals(0, appt0.getRecurIncrement());
      assertEquals(0, appt0.getStartHour());
      assertEquals("%@eqC|6(cI", appt0.getDescription());
      assertEquals(2, appt0.getStartDay());
      assertEquals(0, Appt.RECUR_NUMBER_NEVER);
      assertEquals(3, Appt.RECUR_BY_YEARLY);
      assertEquals(1000, Appt.RECUR_NUMBER_FOREVER);
      assertEquals(1, Appt.RECUR_BY_WEEKLY);
      assertEquals(2, Appt.RECUR_BY_MONTHLY);
      assertTrue(boolean0);
      
      calDay0.addAppt(appt0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("", locale0.getVariant());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JP", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertTrue(calDay0.isValid());
      assertEquals(1, calDay0.getSizeAppts());
      assertEquals(1, calDay0.getMonth());
      assertEquals(2014, calDay0.getYear());
      assertEquals(1, calDay0.getDay());
      assertEquals(0, appt0.getRecurNumber());
      assertEquals(0, appt0.getStartYear());
      assertEquals(2, appt0.getRecurBy());
      assertEquals("am", appt0.getTitle());
      assertFalse(appt0.isRecurring());
      assertEquals(1, appt0.getStartMonth());
      assertEquals(1, appt0.getStartMinute());
      assertTrue(appt0.getValid());
      assertEquals(0, appt0.getRecurIncrement());
      assertEquals(0, appt0.getStartHour());
      assertEquals("%@eqC|6(cI", appt0.getDescription());
      assertEquals(2, appt0.getStartDay());
      assertEquals(0, Appt.RECUR_NUMBER_NEVER);
      assertEquals(3, Appt.RECUR_BY_YEARLY);
      assertEquals(1000, Appt.RECUR_NUMBER_FOREVER);
      assertEquals(1, Appt.RECUR_BY_WEEKLY);
      assertEquals(2, Appt.RECUR_BY_MONTHLY);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      CalDay calDay0 = new CalDay(mockGregorianCalendar0);
      Appt appt0 = new Appt(504, 504, 504, 5, 504, " &kOoU'WnpE", " &kOoU'WnpE");
      calDay0.addAppt(appt0);
      assertEquals((-1), calDay0.getSizeAppts());
      assertTrue(calDay0.isValid());
      assertEquals(2014, calDay0.getYear());
      assertEquals(1, calDay0.getMonth());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      Locale locale0 = Locale.JAPAN;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0, locale0);
      CalDay calDay0 = new CalDay(mockGregorianCalendar0);
      int int0 = calDay0.getDay();
      assertEquals(2014, calDay0.getYear());
      assertEquals(1, int0);
      assertTrue(calDay0.isValid());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      CalDay calDay0 = new CalDay();
      // Undeclared exception!
      try { 
        calDay0.getSizeAppts();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("calendar.CalDay", e);
      }
  }
}
