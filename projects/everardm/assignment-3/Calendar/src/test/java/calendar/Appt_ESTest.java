/*
 * This file was automatically generated by EvoSuite
 * Tue Aug 08 01:21:02 GMT 2017
 */

package calendar;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import calendar.Appt;
import calendar.CalendarUtil;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Appt_ESTest extends Appt_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Appt appt0 = new Appt(13, 4, 4, 4, 1, (String) null, (String) null);
      appt0.setStartHour(12);
      appt0.toString();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Appt appt0 = new Appt(11, 11, 11, 11, 11, "\n", "\n");
      appt0.toString();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Appt appt0 = new Appt(0, 0, 0, 0, 0, "Anv-", "Anv-");
      int[] intArray0 = new int[15];
      appt0.setRecurrence(intArray0, 3, 1, 1);
      appt0.isRecurring();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Appt appt0 = new Appt(8, 8, 8, 0, 0, "", "");
      int[] intArray0 = new int[5];
      intArray0[0] = 8;
      CalendarUtil.DaysInMonth = intArray0;
      appt0.setStartYear(0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Appt appt0 = new Appt((-640), 0, 629, 0, (-640), (String) null, (String) null);
      appt0.setStartMonth(0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Appt appt0 = new Appt(0, 7, 7, 7, 7, "vA:<%a+", "S");
      appt0.getValid();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Appt appt0 = new Appt((-190), 2, 2, 2, 1699, ":", ":");
      appt0.setTitle((String) null);
      appt0.getTitle();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Appt appt0 = new Appt((-246), (-246), 0, 0, (-246), "l`~ {pV(;tzGe0.tJ", "l`~ {pV(;tzGe0.tJ");
      assertEquals((-246), appt0.getStartYear());
      
      appt0.setStartYear(0);
      int int0 = appt0.getStartYear();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Appt appt0 = new Appt(0, (-798), 0, 4, 400, (String) null, "");
      int int0 = appt0.getStartYear();
      assertFalse(appt0.getValid());
      assertEquals(2, appt0.getRecurBy());
      assertEquals((-798), appt0.getStartMinute());
      assertEquals(0, appt0.getStartHour());
      assertEquals(0, appt0.getRecurNumber());
      assertEquals(4, appt0.getStartMonth());
      assertEquals(0, appt0.getRecurIncrement());
      assertEquals(400, int0);
      assertEquals(0, appt0.getStartDay());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Appt appt0 = new Appt((-640), 0, 629, 0, (-640), (String) null, (String) null);
      int int0 = appt0.getStartMonth();
      assertEquals(0, appt0.getRecurIncrement());
      assertEquals((-640), appt0.getStartHour());
      assertFalse(appt0.getValid());
      assertEquals(2, appt0.getRecurBy());
      assertEquals((-640), appt0.getStartYear());
      assertEquals(0, int0);
      assertEquals(629, appt0.getStartDay());
      assertEquals(0, appt0.getStartMinute());
      assertFalse(appt0.isRecurring());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Appt appt0 = new Appt((-640), 0, 629, 0, (-640), (String) null, (String) null);
      int int0 = appt0.getStartMinute();
      assertEquals(0, int0);
      assertEquals(2, appt0.getRecurBy());
      assertEquals(0, appt0.getRecurNumber());
      assertEquals((-640), appt0.getStartYear());
      assertEquals((-640), appt0.getStartHour());
      assertEquals(0, appt0.getRecurIncrement());
      assertFalse(appt0.getValid());
      assertEquals(0, appt0.getStartMonth());
      assertEquals(629, appt0.getStartDay());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Appt appt0 = new Appt((-396), 8, 8, 8, 354, "y>0^f1NdY@zi,'%=L*?", "");
      int int0 = appt0.getStartMinute();
      assertEquals(2, appt0.getRecurBy());
      assertFalse(appt0.getValid());
      assertEquals(8, appt0.getStartDay());
      assertEquals((-396), appt0.getStartHour());
      assertEquals(8, appt0.getStartMonth());
      assertEquals(354, appt0.getStartYear());
      assertEquals("", appt0.getDescription());
      assertEquals(0, appt0.getRecurIncrement());
      assertEquals("y>0^f1NdY@zi,'%=L*?", appt0.getTitle());
      assertEquals(8, int0);
      assertEquals(0, appt0.getRecurNumber());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Appt appt0 = new Appt(0, (-798), 0, 4, 400, (String) null, "");
      int int0 = appt0.getStartHour();
      assertEquals((-798), appt0.getStartMinute());
      assertEquals(0, appt0.getStartDay());
      assertEquals(0, appt0.getRecurIncrement());
      assertEquals(0, int0);
      assertEquals(2, appt0.getRecurBy());
      assertEquals(0, appt0.getRecurNumber());
      assertEquals(4, appt0.getStartMonth());
      assertEquals(400, appt0.getStartYear());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Appt appt0 = new Appt(0, 0, 0, 0, 339, "", "");
      int int0 = appt0.getStartDay();
      assertEquals(2, appt0.getRecurBy());
      assertFalse(appt0.getValid());
      assertEquals(0, appt0.getStartMinute());
      assertFalse(appt0.isRecurring());
      assertEquals(0, appt0.getStartMonth());
      assertEquals(339, appt0.getStartYear());
      assertEquals(0, int0);
      assertEquals(0, appt0.getRecurIncrement());
      assertEquals(0, appt0.getStartHour());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Appt appt0 = new Appt((-535), 0, (-1488), 0, (-1488), "np$/yjO\"py", "Y/XPE");
      int int0 = appt0.getStartDay();
      assertEquals(0, appt0.getStartMonth());
      assertEquals("np$/yjO\"py", appt0.getTitle());
      assertEquals("Y/XPE", appt0.getDescription());
      assertEquals((-535), appt0.getStartHour());
      assertEquals(0, appt0.getStartMinute());
      assertEquals((-1488), int0);
      assertFalse(appt0.getValid());
      assertEquals(2, appt0.getRecurBy());
      assertEquals(0, appt0.getRecurNumber());
      assertEquals(0, appt0.getRecurIncrement());
      assertEquals((-1488), appt0.getStartYear());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Appt appt0 = new Appt((-1370), (-1370), (-1370), 0, 0, "k!?|^&RVLj3=(;", "k!?|^&RVLj3=(;");
      int[] intArray0 = new int[2];
      appt0.setRecurrence(intArray0, 1000, 1622, 922);
      int int0 = appt0.getRecurNumber();
      assertEquals(1622, appt0.getRecurIncrement());
      assertEquals(922, int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Appt appt0 = new Appt(1186, 0, (-1093), 11, (-2490), "", " ,");
      int[] intArray0 = new int[2];
      appt0.setRecurrence(intArray0, 0, 0, (-4068));
      int int0 = appt0.getRecurNumber();
      assertEquals((-4068), int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Appt appt0 = new Appt(0, 0, 0, 0, 0, "Anv-", "Anv-");
      int[] intArray0 = new int[15];
      appt0.setRecurrence(intArray0, 3, 1, 1);
      int int0 = appt0.getRecurIncrement();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Appt appt0 = new Appt((-640), 0, 629, 0, (-640), (String) null, (String) null);
      appt0.setRecurrence(CalendarUtil.DaysInMonth, 629, (-640), 1439);
      int int0 = appt0.getRecurIncrement();
      assertEquals((-640), int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Appt appt0 = new Appt((-1370), (-1370), (-1370), 0, 0, "k!?|^&RVLj3=(;", "k!?|^&RVLj3=(;");
      int[] intArray0 = new int[2];
      appt0.setRecurrence(intArray0, 1000, 1622, 922);
      appt0.getRecurDays();
      assertEquals(922, appt0.getRecurNumber());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Appt appt0 = new Appt(1186, 0, (-1093), 11, (-2490), "", " ,");
      int[] intArray0 = new int[2];
      appt0.setRecurrence(intArray0, 0, 0, (-4068));
      int int0 = appt0.getRecurBy();
      assertEquals((-4068), appt0.getRecurNumber());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Appt appt0 = new Appt((-190), 2, 2, 2, 1699, ":", ":");
      int[] intArray0 = appt0.getRecurDays();
      appt0.setRecurrence(intArray0, (-304), 60, 2);
      int int0 = appt0.getRecurBy();
      assertEquals((-304), int0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Appt appt0 = new Appt(13, 13, 0, 0, 0, "%1Vs-Qn^!l", ":");
      CalendarUtil.DaysInMonth = null;
      // Undeclared exception!
      try { 
        appt0.setStartYear(386);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("calendar.CalendarUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Appt appt0 = new Appt(31, 0, 0, 3, 1000, "", "");
      int[] intArray0 = new int[2];
      CalendarUtil.DaysInMonth = intArray0;
      // Undeclared exception!
      try { 
        appt0.setStartYear(1000);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("calendar.CalendarUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Appt appt0 = new Appt(1001, 575, 575, 0, 3, "calendar.CalendarUtil", "");
      CalendarUtil.DaysInMonth = null;
      // Undeclared exception!
      try { 
        appt0.setStartMonth(0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("calendar.CalendarUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Appt appt0 = new Appt(13, 4, 4, 4, 1, (String) null, (String) null);
      CalendarUtil.DaysInMonth = null;
      // Undeclared exception!
      try { 
        appt0.setStartMinute(0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("calendar.CalendarUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Appt appt0 = new Appt(0, 0, 11, 11, 921, "calendar.CalendarUtil", "calendar.CalendarUtil");
      int[] intArray0 = new int[1];
      CalendarUtil.DaysInMonth = intArray0;
      // Undeclared exception!
      try { 
        appt0.setStartMinute(11);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 11
         //
         verifyException("calendar.CalendarUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Appt appt0 = new Appt(8, 8, 8, 0, 0, "", "");
      CalendarUtil.DaysInMonth = null;
      // Undeclared exception!
      try { 
        appt0.setStartHour((-2344));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("calendar.CalendarUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Appt appt0 = new Appt(11, 11, 11, 11, 2350, "am", "am");
      int[] intArray0 = new int[9];
      CalendarUtil.DaysInMonth = intArray0;
      // Undeclared exception!
      try { 
        appt0.setStartHour(2350);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 11
         //
         verifyException("calendar.CalendarUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Appt appt0 = new Appt(8, 8, 8, 0, 0, "", "");
      CalendarUtil.DaysInMonth = null;
      // Undeclared exception!
      try { 
        appt0.setStartDay(1892);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("calendar.CalendarUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Appt appt0 = new Appt(9, 9, 3484, 9, 3484, "Y", (String) null);
      int[] intArray0 = new int[5];
      CalendarUtil.DaysInMonth = intArray0;
      // Undeclared exception!
      try { 
        appt0.setStartDay(9);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("calendar.CalendarUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      CalendarUtil.DaysInMonth = null;
      Appt appt0 = null;
      try {
        appt0 = new Appt(4, 1, 13, 400, 1, "", "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("calendar.CalendarUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Appt appt0 = null;
      try {
        appt0 = new Appt(13, 13, 13, 13, 13, (String) null, (String) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 13
         //
         verifyException("calendar.CalendarUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Appt appt0 = new Appt((-190), 2, 2, 2, 1699, ":", ":");
      appt0.setDescription("");
      appt0.getDescription();
      assertEquals((-190), appt0.getStartHour());
      assertFalse(appt0.getValid());
      assertEquals(":", appt0.getTitle());
      assertEquals(0, appt0.getRecurIncrement());
      assertFalse(appt0.isRecurring());
      assertEquals(2, appt0.getStartMonth());
      assertEquals(2, appt0.getRecurBy());
      assertEquals(2, appt0.getStartMinute());
      assertEquals(1699, appt0.getStartYear());
      assertEquals(2, appt0.getStartDay());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Appt appt0 = new Appt(11, 11, 11, 11, 2350, "am", "am");
      assertEquals("am", appt0.getDescription());
      
      appt0.setDescription((String) null);
      assertFalse(appt0.isRecurring());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Appt appt0 = new Appt((-1370), (-1370), (-1370), 0, 0, "k!?|^&RVLj3=(;", "k!?|^&RVLj3=(;");
      appt0.setTitle("5S");
      assertEquals("5S", appt0.getTitle());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Appt appt0 = new Appt((-1370), (-1370), (-1370), 0, 0, "k!?|^&RVLj3=(;", "k!?|^&RVLj3=(;");
      int int0 = appt0.getRecurNumber();
      assertEquals((-1370), appt0.getStartMinute());
      assertEquals(0, appt0.getStartMonth());
      assertEquals(0, int0);
      assertEquals("k!?|^&RVLj3=(;", appt0.getDescription());
      assertEquals(2, appt0.getRecurBy());
      assertEquals(0, appt0.getStartYear());
      assertEquals((-1370), appt0.getStartDay());
      assertEquals(0, appt0.getRecurIncrement());
      assertFalse(appt0.getValid());
      assertEquals((-1370), appt0.getStartHour());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Appt appt0 = new Appt((-1370), (-1370), (-1370), 0, 0, "k!?|^&RVLj3=(;", "k!?|^&RVLj3=(;");
      int int0 = appt0.getStartMinute();
      assertEquals((-1370), appt0.getStartDay());
      assertEquals(2, appt0.getRecurBy());
      assertEquals((-1370), int0);
      assertFalse(appt0.getValid());
      assertEquals(0, appt0.getStartYear());
      assertEquals(0, appt0.getRecurIncrement());
      assertEquals("k!?|^&RVLj3=(;", appt0.getDescription());
      assertFalse(appt0.isRecurring());
      assertEquals((-1370), appt0.getStartHour());
      assertEquals(0, appt0.getStartMonth());
      assertEquals("k!?|^&RVLj3=(;", appt0.getTitle());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Appt appt0 = new Appt((-1370), (-1370), (-1370), 0, 0, "k!?|^&RVLj3=(;", "k!?|^&RVLj3=(;");
      int int0 = appt0.getStartHour();
      assertEquals((-1370), appt0.getStartMinute());
      assertEquals(0, appt0.getStartMonth());
      assertEquals("k!?|^&RVLj3=(;", appt0.getTitle());
      assertEquals(2, appt0.getRecurBy());
      assertEquals((-1370), int0);
      assertEquals((-1370), appt0.getStartDay());
      assertEquals(0, appt0.getRecurIncrement());
      assertEquals(0, appt0.getStartYear());
      assertEquals(0, appt0.getRecurNumber());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Appt appt0 = new Appt((-190), 2, 2, 2, 1699, ":", ":");
      int int0 = appt0.getStartMonth();
      assertEquals(0, appt0.getRecurIncrement());
      assertEquals(":", appt0.getTitle());
      assertEquals((-190), appt0.getStartHour());
      assertFalse(appt0.getValid());
      assertEquals(2, appt0.getStartDay());
      assertEquals(1699, appt0.getStartYear());
      assertEquals(":", appt0.getDescription());
      assertEquals(2, appt0.getRecurBy());
      assertEquals(2, int0);
      assertEquals(0, appt0.getRecurNumber());
      assertEquals(2, appt0.getStartMinute());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Appt appt0 = new Appt((-246), (-246), 0, 0, (-246), "l`~ {pV(;tzGe0.tJ", "l`~ {pV(;tzGe0.tJ");
      int int0 = appt0.getStartYear();
      assertFalse(appt0.getValid());
      assertEquals(2, appt0.getRecurBy());
      assertEquals("l`~ {pV(;tzGe0.tJ", appt0.getDescription());
      assertEquals(0, appt0.getRecurIncrement());
      assertEquals((-246), appt0.getStartHour());
      assertEquals(0, appt0.getStartDay());
      assertEquals((-246), int0);
      assertEquals((-246), appt0.getStartMinute());
      assertFalse(appt0.isRecurring());
      assertEquals(0, appt0.getStartMonth());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Appt appt0 = new Appt((-640), 0, 629, 0, (-640), (String) null, (String) null);
      boolean boolean0 = appt0.getValid();
      assertEquals(2, appt0.getRecurBy());
      assertEquals((-640), appt0.getStartYear());
      assertEquals(629, appt0.getStartDay());
      assertFalse(appt0.isRecurring());
      assertEquals(0, appt0.getStartMinute());
      assertEquals(0, appt0.getStartMonth());
      assertEquals((-640), appt0.getStartHour());
      assertEquals(0, appt0.getRecurIncrement());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Appt appt0 = new Appt((-190), 2, 2, 2, 1699, ":", ":");
      appt0.getTitle();
      assertEquals((-190), appt0.getStartHour());
      assertEquals(0, appt0.getRecurIncrement());
      assertEquals(2, appt0.getStartDay());
      assertEquals(1699, appt0.getStartYear());
      assertFalse(appt0.getValid());
      assertFalse(appt0.isRecurring());
      assertEquals(":", appt0.getDescription());
      assertEquals(2, appt0.getRecurBy());
      assertEquals(2, appt0.getStartMonth());
      assertEquals(2, appt0.getStartMinute());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Appt appt0 = new Appt((-190), 2, 2, 2, 1699, ":", ":");
      String string0 = appt0.getDescription();
      assertEquals(":", string0);
      assertEquals(":", appt0.getTitle());
      assertEquals(0, appt0.getRecurIncrement());
      assertEquals(2, appt0.getStartMonth());
      assertEquals(2, appt0.getStartDay());
      assertFalse(appt0.getValid());
      assertEquals((-190), appt0.getStartHour());
      assertEquals(1699, appt0.getStartYear());
      assertEquals(2, appt0.getStartMinute());
      assertEquals(2, appt0.getRecurBy());
      assertFalse(appt0.isRecurring());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Appt appt0 = new Appt((-640), 0, 629, 0, (-640), (String) null, (String) null);
      int int0 = appt0.getStartDay();
      assertEquals(629, int0);
      assertEquals(0, appt0.getStartMonth());
      assertEquals(0, appt0.getStartMinute());
      assertEquals(2, appt0.getRecurBy());
      assertEquals(0, appt0.getRecurNumber());
      assertEquals((-640), appt0.getStartYear());
      assertEquals((-640), appt0.getStartHour());
      assertEquals(0, appt0.getRecurIncrement());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Appt appt0 = new Appt(8, 8, 8, 0, 0, "", "");
      String string0 = appt0.toString();
      assertEquals(2, appt0.getRecurBy());
      assertEquals(8, appt0.getStartDay());
      assertEquals(8, appt0.getStartHour());
      assertNull(string0);
      assertEquals(8, appt0.getStartMinute());
      assertEquals(0, appt0.getRecurNumber());
      assertEquals(0, appt0.getStartYear());
      assertEquals(0, appt0.getRecurIncrement());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Appt appt0 = new Appt(13, 4, 4, 4, 1, (String) null, (String) null);
      String string0 = appt0.toString();
      assertEquals(0, appt0.getRecurIncrement());
      assertEquals("\t4/4/1 at 1:4pm ,, \n", string0);
      assertEquals(2, appt0.getRecurBy());
      assertNotNull(string0);
      assertFalse(appt0.isRecurring());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Appt appt0 = new Appt(11, 11, 11, 11, 11, "LiEmL$34aiMd;?/", "LiEmL$34aiMd;?/");
      appt0.setRecurrence((int[]) null, 11, 11, (-136));
      appt0.isRecurring();
      assertEquals(11, appt0.getRecurBy());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Appt appt0 = new Appt(0, (-798), 0, 4, 400, (String) null, "");
      appt0.setStartMinute(400);
      assertEquals(400, appt0.getStartMinute());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Appt appt0 = new Appt(1867, 1867, 1867, 5, 1867, (String) null, ", ");
      int int0 = appt0.getStartHour();
      assertEquals("", appt0.getTitle());
      assertEquals(1867, appt0.getStartDay());
      assertEquals(1867, int0);
      assertEquals(2, appt0.getRecurBy());
      assertEquals(1867, appt0.getStartYear());
      assertEquals(1867, appt0.getStartMinute());
      assertEquals(0, appt0.getRecurNumber());
      assertEquals(5, appt0.getStartMonth());
      assertEquals(", ", appt0.getDescription());
      assertFalse(appt0.getValid());
      assertEquals(0, appt0.getRecurIncrement());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Appt appt0 = new Appt(0, 7, 7, 7, 7, "vA:<%a+", "S");
      appt0.setStartMinute(60);
      assertEquals(60, appt0.getStartMinute());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Appt appt0 = new Appt(24, 24, (-746), 6, 24, "~", "~");
      // Undeclared exception!
      try { 
        appt0.setStartMonth((-746));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -746
         //
         verifyException("calendar.CalendarUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Appt appt0 = new Appt(24, 24, (-746), 6, 24, "~", "~");
      int int0 = appt0.getRecurBy();
      assertEquals((-746), appt0.getStartDay());
      assertFalse(appt0.getValid());
      assertEquals(0, appt0.getRecurIncrement());
      assertEquals(6, appt0.getStartMonth());
      assertFalse(appt0.isRecurring());
      assertEquals(24, appt0.getStartYear());
      assertEquals("~", appt0.getDescription());
      assertEquals(24, appt0.getStartHour());
      assertEquals(24, appt0.getStartMinute());
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Appt appt0 = new Appt(9, 9, 3484, 9, 3484, "Y", (String) null);
      assertEquals(3484, appt0.getStartDay());
      
      appt0.setStartDay(9);
      assertEquals(9, appt0.getStartDay());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Appt appt0 = new Appt((-640), 0, 629, 0, (-640), (String) null, (String) null);
      int int0 = appt0.getRecurIncrement();
      assertEquals(0, appt0.getStartMinute());
      assertFalse(appt0.getValid());
      assertEquals(0, int0);
      assertEquals((-640), appt0.getStartHour());
      assertEquals(629, appt0.getStartDay());
      assertEquals(0, appt0.getStartMonth());
      assertEquals(2, appt0.getRecurBy());
      assertEquals((-640), appt0.getStartYear());
      assertEquals(0, appt0.getRecurNumber());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Appt appt0 = new Appt(0, 7, 7, 7, 7, "vA:<%a+", "S");
      String string0 = appt0.toString();
      assertEquals("\t7/7/7 at 12:7am ,vA:<%a+, S\n", string0);
      assertNotNull(string0);
      assertEquals(0, appt0.getRecurIncrement());
      assertEquals(2, appt0.getRecurBy());
      assertFalse(appt0.isRecurring());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Appt appt0 = new Appt(0, 7, 7, 7, 7, "vA:<%a+", "S");
      boolean boolean0 = appt0.isRecurring();
      assertFalse(boolean0);
      assertEquals(0, appt0.getRecurIncrement());
      assertEquals(7, appt0.getStartMinute());
      assertEquals(7, appt0.getStartMonth());
      assertEquals(0, appt0.getStartHour());
      assertEquals(7, appt0.getStartDay());
      assertEquals(2, appt0.getRecurBy());
      assertTrue(appt0.getValid());
  }
}
