/*
 * This file was automatically generated by EvoSuite
 * Sun Jul 09 05:17:11 GMT 2017
 */


import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Die_ESTest extends Die_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Die die0 = new Die(678, 678);
      assertEquals(6, Die.DEFAULT_SIDES);
      assertEquals(675, die0.getResult());
      assertEquals(691, die0.getNumSides());
      assertNotNull(die0);
      
      Random.setNextRandom(2379);
      int int0 = die0.roll();
      assertEquals(6, Die.DEFAULT_SIDES);
      assertEquals(316, int0);
      assertEquals(691, die0.getNumSides());
      assertEquals(313, die0.getResult());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Die die0 = new Die(678, 678);
      assertEquals(6, Die.DEFAULT_SIDES);
      assertEquals(675, die0.getResult());
      assertEquals(691, die0.getNumSides());
      assertNotNull(die0);
      
      boolean boolean0 = die0.equals(die0);
      assertEquals(6, Die.DEFAULT_SIDES);
      assertFalse(boolean0);
      assertEquals(675, die0.getResult());
      assertEquals(691, die0.getNumSides());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Die die0 = null;
      try {
        die0 = new Die(1239);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // Violation of precondition: numSides = 1239numSides must be greater than 1
         //
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Die die0 = new Die(678, 678);
      assertEquals(6, Die.DEFAULT_SIDES);
      assertEquals(691, die0.getNumSides());
      assertEquals(675, die0.getResult());
      assertNotNull(die0);
      
      int int0 = die0.getResult();
      assertEquals(6, Die.DEFAULT_SIDES);
      assertEquals(675, int0);
      assertEquals(691, die0.getNumSides());
      assertEquals(675, die0.getResult());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Die die0 = new Die(678, 678);
      assertEquals(6, Die.DEFAULT_SIDES);
      assertEquals(675, die0.getResult());
      assertEquals(691, die0.getNumSides());
      assertNotNull(die0);
      
      int int0 = die0.getNumSides();
      assertEquals(6, Die.DEFAULT_SIDES);
      assertEquals(691, int0);
      assertEquals(675, die0.getResult());
      assertEquals(691, die0.getNumSides());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Die die0 = new Die(678, 678);
      assertEquals(6, Die.DEFAULT_SIDES);
      assertEquals(675, die0.getResult());
      assertEquals(691, die0.getNumSides());
      assertNotNull(die0);
      
      // Undeclared exception!
      try { 
        die0.equals((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Die", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Die die0 = new Die(678, 678);
      assertEquals(6, Die.DEFAULT_SIDES);
      assertEquals(691, die0.getNumSides());
      assertEquals(675, die0.getResult());
      assertNotNull(die0);
      
      boolean boolean0 = die0.equals("Num sides 691 result 675");
      assertEquals(6, Die.DEFAULT_SIDES);
      assertFalse(boolean0);
      assertEquals(691, die0.getNumSides());
      assertEquals(675, die0.getResult());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Die die0 = new Die(678, 678);
      assertEquals(6, Die.DEFAULT_SIDES);
      assertEquals(675, die0.getResult());
      assertEquals(691, die0.getNumSides());
      assertNotNull(die0);
      
      Random.setNextRandom(691);
      int int0 = die0.roll();
      assertEquals(6, Die.DEFAULT_SIDES);
      assertEquals(4, int0);
      assertEquals(1, die0.getResult());
      assertEquals(691, die0.getNumSides());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Die die0 = new Die(678, 678);
      assertEquals(6, Die.DEFAULT_SIDES);
      assertEquals(675, die0.getResult());
      assertEquals(691, die0.getNumSides());
      assertNotNull(die0);
      
      // Undeclared exception!
      try { 
        die0.roll();
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Die die0 = new Die(1168, 1168);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Die die0 = null;
      try {
        die0 = new Die(55, 5259);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // Violation of precondition
         //
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Die die0 = null;
      try {
        die0 = new Die(521, (-797));
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // Violation of precondition
         //
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Die die0 = null;
      try {
        die0 = new Die((-1131), (-1131));
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // Violation of precondition
         //
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Die die0 = null;
      try {
        die0 = new Die((-1562));
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Die die0 = null;
      try {
        die0 = new Die();
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // Violation of precondition: numSides = 6numSides must be greater than 1
         //
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Die die0 = new Die(678, 678);
      String string0 = die0.toString();
      assertEquals("Num sides 691 result 675", string0);
  }
}
